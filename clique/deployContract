
../build/bin/geth --datadir signer/data account new


../build/bin/geth --datadir signer/data init clique.json


./solc/solc --optimize --bin --asm ../src/VerifySignature.sol


./solc/solc --optimize --bin ../src/VerifySignature.sol


../build/bin/geth --datadir signer/data --networkid 55661 --port 2002 --unlock 492f3232b3e2affb484ddebd3bc84c091b68626f console


eth.getBalance(eth.accounts[0])


sha3Msg = web3.sha3("blockchain")

signedData = eth.sign(eth.accounts[0], sha3Msg)



========================= ADD =============================
//first
abi=[{"constant":false,"inputs":[{"name":"a","type":"uint8"},{"name":"b","type":"uint8"}],"name":"ADD","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]


sample=eth.contract(abi)


SampleHEX="0x608060405234801561001057600080fd5b5061011c806100206000396000f300608060405260053610603e5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663e2e7004281146043575b600080fd5b348015604e57600080fd5b50607460048036036040811015606357600080fd5b5060ff81358116916020013516608a565b6040805160ff9092168252519081900360200190f35b6000600b838360405160008152602001604052604051808360ff1660ff1681526020018260ff1660ff168152602001925050506020604051602081039080840390855afa15801560de573d6000803e3d6000fd5b5050604051601f1901519493505050505600a165627a7a723058200ec872e84ef1be779564360fec7f95619f4746e17b3b16ed03784f535df591a70029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()
//


samplecontract=sample.at("")


samplecontract.ADD.call(1, 2)


========================= Sha256 =============================

abi=[{"constant":false,"inputs":[{"name":"a","type":"bytes"}],"name":"strSha256","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]


sample=eth.contract(abi)


SampleHEX="0x608060405234801561001057600080fd5b506101c6806100206000396000f3006080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166360bd26ec8114610045575b600080fd5b34801561005157600080fd5b506100f86004803603602081101561006857600080fd5b81019060208101813564010000000081111561008357600080fd5b82018360208201111561009557600080fd5b803590602001918460018302840111640100000000831117156100b757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061010a945050505050565b60408051918252519081900360200190f35b60006002826040518082805190602001908083835b6020831061013e5780518252601f19909201916020918201910161011f565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561017d573d6000803e3d6000fd5b5050506040513d602081101561019257600080fd5b5051929150505600a165627a7a72305820d2ce1e461c4a34720ce5b9fab6e7112ccc72562c9db0ea4d56b1d3b8932cc2340029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")


samplecontract.strSha256.call("1234568790")


=============== ecrecover ============================

sha3Msg = web3.sha3("blockchain")

signedData = eth.sign(eth.accounts[0], sha3Msg)

vVar = 27

rVar = "0xd34e2e413bb1776b46d422ba87d7ea9e848eef2889b060bbef941a2b8bedea70"

sVar = "0x0245b0c61150cb7ae40b6b206896bc15879a873570eabfa763860728a73ff14d"

abi=[{"constant":false,"inputs":[{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"},{"name":"message","type":"bytes32"}],"name":"recoverSigner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]


sample=eth.contract(abi)


SampleHEX="0x608060405234801561001057600080fd5b5061018f806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663bb3dac728114610045575b600080fd5b34801561005157600080fd5b506100846004803603608081101561006857600080fd5b5060ff81351690602081013590604081013590606001356100ad565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c80830185905283518084039091018152605c8301808552815191830191909120600091829052607c84018086525260ff8816609c84015260bc830187905260dc8301869052925160019260fc8082019392601f1981019281900390910190855afa15801561014f573d6000803e3d6000fd5b5050604051601f19015196955050505050505600a165627a7a7230582040c7402cbc5eef62fcf80c533e98ae6b1999e229e8d22a4bf7af01d24a08f3400029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")



===================================================


//eth.getBlock()


//samplerecpt=eth.getTransactionReceipt("")


=============================== ecrecover ==============================

sha3Msg = web3.sha3("blockchain")

signedData = eth.sign(eth.accounts[0], sha3Msg)

abi=[{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"message","type":"bytes32"},{"name":"sig","type":"bytes"}],"name":"recoverSigner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"}]


sample=eth.contract(abi)


SampleHEX="0x608060405261028a806100136000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166341c0e1b5811461005057806397aba7f914610067575b600080fd5b34801561005c57600080fd5b5061006561014a565b005b34801561007357600080fd5b506101216004803603604081101561008a57600080fd5b813591908101906040810160208201356401000000008111156100ac57600080fd5b8201836020820111156100be57600080fd5b803590602001918460018302840111640100000000831117156100e057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061014d945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b33ff5b60008060008061015c856101dc565b925092509250600161016d8761020d565b84848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156101c7573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000806000835160411415156101f157600080fd5b5050506020810151604082015160609092015160001a92909190565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c9091019091528151910120905600a165627a7a72305820d62d1e9ca8db5e3703147b4982d580dda51a24b8742775c86927779111cc4be00029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")


samplecontract.recoverSigner.call(sha3Msg, signedData)


================================== spilt =======================


sha3Msg = web3.sha3("blockchain")

signedData = eth.sign(eth.accounts[0], sha3Msg)

abi=[{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"message","type":"bytes32"},{"name":"sig","type":"bytes"}],"name":"recoverSigner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"sig","type":"bytes"}],"name":"splitSignature","outputs":[{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"}]


sample=eth.contract(abi)


SampleHEX="0x60806040526103b1806100136000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b51461005c57806397aba7f914610073578063a7bb58031461012a575b600080fd5b34801561006857600080fd5b506100716101cb565b005b34801561007f57600080fd5b506100e86004803603810190808035600019169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506101e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013657600080fd5b50610191600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061028d565b604051808460ff1660ff16815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16ff5b6000806000806101f38561028d565b9250925092506001610204876102ca565b848484604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610278573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604184511415156102a257600080fd5b6020840151915060408401519050606084015160001a92508282829250925092509193909250565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515610351578051825260208201915060208101905060208303925061032c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090509190505600a165627a7a723058203974bf0968b42e449f7e284a36e2eaab5b69a702c0a68165d7e1a84a448c818e0029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")


samplecontract.recoverSigner.call(sha3Msg, signedData)


samplecontract.splitSignature.call(signedData)


========================= VerifyProof =============================

abi=[{"constant":false,"inputs":[{"name":"proof","type":"bytes"},{"name":"data_hash","type":"bytes32"},{"name":"result","type":"uint256"},{"name":"coefficent","type":"bytes"}],"name":"verifyProof","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]


sample=eth.contract(abi)


SampleHEX="0x608060405234801561001057600080fd5b506102b9806100206000396000f3006080604052600436106100405763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166343d66ff98114610045575b600080fd5b34801561005157600080fd5b5061018b6004803603608081101561006857600080fd5b81019060208101813564010000000081111561008357600080fd5b82018360208201111561009557600080fd5b803590602001918460018302840111640100000000831117156100b757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929584359560208601359591945092506060810191506040013564010000000081111561011657600080fd5b82018360208201111561012857600080fd5b8035906020019184600183028401116401000000008311171561014a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061019d945050505050565b60408051918252519081900360200190f35b6000600c858585856040518085805190602001908083835b602083106101d45780518252601f1990920191602091820191016101b5565b51815160209384036101000a600019018019909216911617905292018681528083018690528451604090910192850191508083835b602083106102285780518252601f199092019160209182019101610209565b6001836020036101000a038019825116818451168082178552505050505050905001945050505050602060405180830381855afa15801561026d573d6000803e3d6000fd5b5050506040513d602081101561028257600080fd5b5051959450505050505600a165627a7a72305820c543424d0ae8d05b1b9e8565d42fbe46ac3861ac632fba9f3a82b576f8774e310029"


thesample=sample.new({from:eth.accounts[0],data:SampleHEX,gas:3000000}, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })


txpool.status


miner.start()


miner.stop()


samplecontract=sample.at("")


samplecontract.verifyProof.call(proof, hashData, premium, coeff)

=================== geth gennerate proof ==========================


tupleData = [80, 75, 115, 178, 85, 17, 148, 178, 17, 126, 39, 9, 34, 14, 66, 65, 203, 6, 191, 16, 141, 210, 73, 136, 65, 136, 152, 60, 117, 24, 101, 18]

dataCoeff = [8, 5, 10, 2, 2,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5]
dataCoeff = [8, 5, 10, 2, 2,1,1,1,1,1,1,1,1,1,1]

admin.genProof(tupleData, dataCoeff)


samplecontract.verifyProof.call(proof, hashData, hashCoeff, premium)




//
../go-ethereum/build/bin/geth --datadir signer/data --networkid 55661 --port 2002 --unlock 492f3232b3e2affb484ddebd3bc84c091b68626f --password signer/passwd.txt console


